services:
  postgres:
    image: postgres:17.4-alpine3.21
    container_name: ecommerce_db
    restart: on-failure
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-ecom_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-strongpassword}
      - POSTGRES_DB=${POSTGRES_DB:-ecommerce}
    ports:
      - "5432:5432"
    volumes:
      - ecommerce_data:/var/lib/postgresql/data
    networks:
      - ecommerce_net
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-ecom_user} -d ${POSTGRES_DB:-ecommerce}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin4 - comprehensive PostgreSQL management tool with secure env vars
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ecommerce_pgadmin
    restart: on-failure
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-secureadminpass}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce_net

  redis:
    image: redis:7.2-alpine
    container_name: ecommerce_redis
    restart: on-failure
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - ecommerce_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: ecommerce_redis_ui
    restart: on-failure
    ports:
      - "8001:8001"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ecommerce_net

volumes:
  ecommerce_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
networks:
  ecommerce_net:
    driver: bridge
